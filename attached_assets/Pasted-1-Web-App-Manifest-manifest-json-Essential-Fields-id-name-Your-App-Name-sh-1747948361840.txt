1. Web App Manifest (manifest.json)
Essential Fields
{
  "id": "/",
  "name": "Your App Name",
  "short_name": "AppName",
  "description": "Brief description of your app",
  "start_url": "/",
  "scope": "/",
  "display": "standalone",
  "orientation": "portrait",
  "theme_color": "#000000",
  "background_color": "#ffffff",
  "lang": "en"
}
Icon Requirements
Android: 192x192, 512x512 (minimum)
iOS: 180x180 for apple-touch-icon
Maskable icons: Include "purpose": ["any", "maskable"] for Android
Use PNG format for best compatibility
Screenshots (Android Play Store style)
Mobile: 320x568, 540x720
Desktop: 1280x720, 1920x1080
Include in manifest for better installation prompts
2. HTML Meta Tags
Universal PWA Tags
<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
<meta name="theme-color" content="#000000">
<link rel="manifest" href="/manifest.json">
iOS-Specific Tags
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<meta name="apple-mobile-web-app-title" content="Your App Name">
<link rel="apple-touch-icon" href="/apple-touch-icon.png">
Android-Specific Tags
<meta name="mobile-web-app-capable" content="yes">
<meta name="application-name" content="Your App Name">
3. Service Worker Implementation
Basic Service Worker Structure
// sw.js
const CACHE_NAME = 'app-v1';
const urlsToCache = [
  '/',
  '/static/css/main.css',
  '/static/js/main.js',
  '/offline.html'
];
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        return response || fetch(event.request);
      })
      .catch(() => caches.match('/offline.html'))
  );
});
Service Worker Registration
// In your main app
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js');
  });
}
4. Installation Prompt Handling
Capture Install Event
let deferredPrompt;
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
  showInstallButton();
});
function showInstallButton() {
  const installButton = document.getElementById('install-btn');
  installButton.style.display = 'block';
  
  installButton.addEventListener('click', () => {
    deferredPrompt.prompt();
    deferredPrompt.userChoice.then((choiceResult) => {
      if (choiceResult.outcome === 'accepted') {
        console.log('User accepted install');
      }
      deferredPrompt = null;
    });
  });
}
5. Platform-Specific Installation Detection
Check if Already Installed
// Android - check if standalone
function isInstalled() {
  return window.matchMedia('(display-mode: standalone)').matches;
}
// iOS - check if standalone
function isIOSInstalled() {
  return window.navigator.standalone === true;
}
// Universal check
function isPWAInstalled() {
  return isInstalled() || isIOSInstalled();
}
iOS Installation Guide
Since iOS doesn't support automatic installation prompts, provide clear instructions:

Tap the Share button (square with arrow)
Scroll down and tap "Add to Home Screen"
Tap "Add" in the top right corner
6. Testing and Validation
Chrome DevTools Testing
Open DevTools → Application tab
Check Manifest section for errors
Use Lighthouse audit for PWA score
Test "Add to homescreen" in Application tab
Real Device Testing
Android: Test with Chrome browser
iOS: Test with Safari browser
Verify icons appear correctly on home screen
Test offline functionality
Ensure app launches in standalone mode
7. Common Pitfalls to Avoid
Manifest Issues
Missing or incorrect start_url
Icons not properly sized or missing
Invalid JSON syntax
Missing scope field
Service Worker Problems
Not serving over HTTPS (required except localhost)
Incorrect cache strategies
Missing offline fallback
Service worker not updating properly
iOS-Specific Issues
Missing apple-touch-icon
Incorrect viewport-fit settings
Status bar not configured properly
App not launching in standalone mode
8. HTTPS Requirement
PWAs must be served over HTTPS in production. Only localhost is exempt from this requirement during development.

9. File Structure Example
/
├── manifest.json
├── sw.js
├── offline.html
├── icons/
│   ├── icon-192.png
│   ├── icon-512.png
│   └── apple-touch-icon.png
└── index.html